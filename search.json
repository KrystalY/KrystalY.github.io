[{"title":"SERIES:DEEP DIVE INTO JQUERY","url":"/2020/08/09/SERIES-DEEP-DIVE-INTO-JQUERY/","content":"\n# jQuery 파헤치기. 그 시작\n> 나의 숙원 사업, 몇 번의 시도와 실패\n\n분석을 하되 어떻게 글을 남겨야 할지 막연했다.\n사실 지금도 막연하다.\n\n복기도 해볼 것이며, 관련 이론도 엮어보기도 할 것 같다.\n[js doc](https://jsdoc.app/) 을 함께 적어내려가는 것도 좋을 거 같다.\n\njquery 1.11.0 소스 기준 /\n목표는 올해 이내\n\n\n### # Reference\n- [jquery-1.11.0. 소스](http://code.jquery.com/jquery-1.11.0.js)\n- [제로초 - jquery 분석](https://www.zerocho.com/category/JavaScript/post/578700166d694b98754f1d92)\n- [jQuery 소스 구조분석을 해야하는 이유](https://boycoding.tistory.com/45)\n- [JSDoc를 사용해서 Javasript 문서화해보자!](https://okayoon.tistory.com/entry/JSDoc%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-Javasript-%EB%AC%B8%EC%84%9C%ED%99%94%ED%95%B4%EB%B3%B4%EC%9E%90)\n"},{"title":"SERIES:USE VSCODE FIN","url":"/2020/07/18/SERIES-USE-VSCODE-FIN/","content":"\n## VSCODE 적응기 FIN\n> 여전히 적응중\n\nsetting sync 기능으로 환경 세팅값을 유지, 보완하고 있다. 여전히 적응 중이고, 고군분투 중이다. 😭\n\n툴 적응기동안 기존의 익숙한 것에 좀 더 생산성을 낼 수 있도록 집중해보았다.\n## # Git command<br />\ngit cmd 사용이 익숙해졌다. commit 도 잘 쪼개서 올리고, 메세지에도 정성을 쏟고 있다...!👏 전반적으로 터미널 창과 더 친해졌고, 단순히 깃 뿐만 아니라 다른 에러나 워닝에 대해 더 꼼꼼히 읽는 습관이 생겼다.\n## # emmet<br />\nemmet 문법도 더 사용해서, 코딩 작성에 속도를 더 올리고 있다. 단순 반복 말고, 생각하면서 한줄을 써내려가고 tab을 누르는 맛이란.. 굉장한 쾌감을 준다.👍\n(자주 쓰는 option 태그 예시를 끄적..끄적) \n```html\noption[value=\"$0\"]{$0개 보기}*10\n```\n\n---\n\n여전히, ctrl + K을 디폴트로 깔고 가는 단축키 때문에..  jetbrain IED Keymap의 유혹이 엄청나게 오지만... 잘 참고 지내고 있다.(커스텀하려면 벌써 했지..😅)\n\n블로그를 쓸 땐 웹스톰을 계속 쓸 예정이다. 허나, 메인은 VSCode로 이동!\n\n최근 많이 썼던 기능을 나열하면서, VSCODE 적응기는 이만 마무리..👋👋\n\n---\n(W)ebstorm → (VSC)ode로 이동중\n\n## # toggle tool bar: ctrl + B\n\n## # Terminal:<br />\nalt + t : 상태바 Terminal 오픈<br />\nctrl + shift + `: 폴더별 터미널 선택 -> 오픈<br />\nctrl + shift + 5 : split\n\n## # 단어 선택<br />\n같은 단어 잡기 : (W) ctrl + W / (VSC) ctrl + D<br />\n라인복사: shfit + alt + 위 아래 방향키<br />\n라인 갖고 이동: alt + 위아래 방향키\n\n## # 커서\n탐색기 포커스(cmd + 0 / ctrl + 0)<br />\n편집기 포커스(cmd + 1/ ctrl +1)<br />\n터미널 포커스 ( ctrl + ```)<br />\n브래드크럼브 포커스 (cmd +shift +.)\n\n## # 레벨링(leveling): ctrl + k ctrl + 1-7\n\n## # 화면<br />\n전체 닫기<br />\n하나빼고 닫기<br />\n나누기 :  ctrl + alt + 방향키<br />\n이동하기: alt + 방향키<br />\nFocus on Open Editors view(화면으로 포커스 이동) : ctrl + K E<br />\nFocus on Breadcrumb: ctrl +alt + .<br />\nmove tab ctrl + M\n\n## # 파일<br />\nFile: 자동저장 Toggle Auto Save:(custom) ctrl +alt + S\n\n## # 하단 패널<br />\ntoggle : ctrl + J<br />\nsize max toggle: (custom): ctrl + alt + shift + J\n\n## # 생성하기<br />\n(custom)new file: alt + insert<br />\n(custom)new folder: shift+ alt + insert\n\n## # tab emmet 기능\nctrl + k ctrl + s > extensions > Emmet > Trggier Expeansion on Tab 체크\n\n---\n\n#### # references\n- [tab emmet 기능](https://blog.naver.com/PostView.nhn?blogId=ajdkfl6445&logNo=221459097158&parentCategoryNo=&categoryNo=26&viewDate=&isShowPopularPosts=true&from=search)\n- [VS Code 후기 및 Bookmarks, 한글 깨짐](https://hubbleconstant.tistory.com/19)\n","tags":["vscode"]},{"title":"SERIES:USE VSCODE03","url":"/2020/06/27/SERIES-USE-VSCODE03/","content":"\n## VSCODE 적응기03\n\n> Digging into Debugging\n\n[지난 번에 올렸던 글](https://sujeongy.github.io/2020/06/26/SERIES-USE-VSCODE02) 에서 참조했던 영상의 최신글을 찾았다.\n(본인 PC에선 영상 재생이 매끄럽지 않아, 제공되는 자료로 공부했다.😅😅)\n\n- [크롬 개발자 도구를 이용한 자바스크립트 디버깅](https://subicura.com/2018/02/14/javascript-debugging.html)\n\n> IED(VSCode)에서 디버깅\n\n이전에도 디버깅에 대한 글을 많이 읽었는데,\n요즘 들어서 많이 이해하고 필요성을 느꼈다.(Vue devtool 덕분인가..) console.log에 벗어나 적용시키고 있다. (일일이 찍기엔..🤢)\n\n> Chrome Dev Tool에서 디버깅\n\n덤으로,\n\n- [Chrome DevTools](https://developers.google.com/web/tools/chrome-devtools/?hl=ko)\n\n이 또한 예전에 봤지만, 정말 필요한 것만 쓱- 봤던거 같다.\n다음달 페이지 최적화 작업에 많은 도움이 될 거 같아서, 더 익혀볼 예정이다.\n\n> Custom\n\nVSCode에 좋은 확장프로그램이 많다.\n\n허나,\n\n1. 생각보다 많은 개발자들이 default 환경 이용한다.\n2. 본인의 커스텀 환경이 아닌 경우가 생긴다.(ex. 코드리뷰)\n3. 확장프로그램이 많으면 스스로가 keymap 관리의 어려워진다.\n\n등등의 이유로 최소한만 가져가려고 한다.\n(git, bookmark, lint, prettier 등등..)\n\n### # References\n\n- [VSCode 확장프로그램 추천](https://bbol-world.tistory.com/43)\n- [김포프 - 프로그래밍의 반은 디버깅](https://www.youtube.com/watch?v=rHgYy7JrP1c)\n","tags":["vscode"]},{"title":"SERIES:USE VSCODE02","url":"/2020/06/26/SERIES-USE-VSCODE02/","content":"\n## VSCODE 적응기02\n> 연습, 연습, 연습\n\n익숙해지려고 노력중이다.\n\n단축키도 익숙지 않고 UI까지 한눈에 들어오지 않아서, 마우스를 써도 작업속도가 나지 않는다. 처음엔 노트에 자주 쓰는 단축키들을 정리하면서 새로운 것도 찾아가고, 기존에 있던 단축키를 커스텀하면서 본인 나름대로 더 효율적인 키조합을 하고 있다.\n\nGUI가 편하긴 했지만, 역시 툴이 이동되면서 적응해야 하는 시간은 무시할 수가 없다는 걸 깨달았다. 깃은 커멘드로 사용하도록 아예 갈아 탈 예정이다.\n\n\n> (W)ebstorm → (VSC)ode로 이동중\n\n생각보다 VSCode가 좋아서 사실 많이 놀랬다.\n1. 가볍다.\n1. 가볍다.\n1. 가볍다.\n\n같은 프로젝트를 열어도 이전에 웹스톰에서 작업했을때는 버벅거렸다. 하지만 VSC에선 매끄럽게 잘 작동한다.\n개인적으로 터미널을 많이 쓰는데 터미널 탭도 split가 된다..👍\n\n\n이번 주말엔 VSCode로 디버깅 연습을 좀더 해야 겠다.\n##### # 참고하기 좋은 사이트\n- [영상 - JS 디버깅 및 테스트 방법](https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=126#sec2sec2)\n","tags":["vscode"]},{"title":"SERIES:USE VSCODE","url":"/2020/06/24/SERIES-USE-VSCODE/","content":"\n## VSCODE 적응기\n> ... 시작\n\n\n오랜만에 쓰는 블로그\n\n마지막으로 글쓴지 3달밖에 지나지 않았는데, hexo사용법이 어색해졌다.\n(이래서 README 에 usage를 꼼꼼히 정리를 해야한다..😢)\n\n본인은 웹스톰만 메인으로 4년정도 사용하였고,\n아톰, 서브라임3을 1-2달정도 경험해 보았다.\n\nVSCode을 접할 기회가 있었고, 이제는 피할 수 없는 상황이 왔다.\n피할 수 없으면, 즐기는 편🐱‍👤 이라서 즐겨 보기로 했다.\n\n##### # 참고 사이트\n- [2019년 자바스크립트 개발은 VSCODE로](http://sculove.github.io/blog/2018/11/28/to-vscode-in-2019/)\n- [노마드코더 - vsc 단축키 5분 정리](https://www.youtube.com/watch?v=Wn7j5dfbJF4)\n\n\n\n찾아보니 참고할 만한 좋은 정보들이 많았다.\n\n우선, 본인이 자주 쓰던 단축키 종류부터 목록화 해보자.\n- VCS(commit, push, pull, log) \n- Toggle Terminal\n- Toggle Tool windows\n- OPEN SETTINGS\n- new file/folder\n- rename\n- change focus\n- search global\n- find folder/file\n- copy file path\n- close/split/close all tab, goto splitter\n- go last/prev edit location\n- doc leveling\n- go element open - close\n- ...\n\n현재, 생각나는 것만 이정도\n플러그인까지 포함하면 범위는 더 넓어질 듯 하다.\n\n개인적으로 여러툴을 쓰는 것보다 한 에디터가 갖고 있는 기능을 제대로 활용할 수 있는 것을 선호하는 편\n(*요즘 webstorm에서 postman처럼 api 테스팅 가능한 것은 안 비밀 cf. [HTTP client in WebStorm code editor](https://www.jetbrains.com/help/webstorm/http-client-in-product-code-editor.html))\n\n이제 막 세팅하고 ctrl + K, ctrl + S 만 외웠지만,\n재밌는 경험이 될 듯하다.\n","tags":["vscode"]},{"title":"TIL_2020_04_07","url":"/2020/04/07/TIL_2020_04_07/","content":"\n### SVN 서버 반영시 이슈\n>[an error occurred while processing this directive](https://github.com/mozilla/pdf.js/issues/2371)\n\n[시도]\n현재 로컬에서 포트를 제외하고 잘 반영이 된다.\n하지만 서버에 올라간 것은 도메인이라서 그런지 :80로 포트를 강제로 먹여도 여전히 깨진다.\n\n[해결법]\n- ..pending\n\n### thoughts\n- 환경 설정시 고려할 것도, 변수도 많다.\n","tags":["TIL"]},{"title":"TIL_2020_04_06","url":"/2020/04/06/TIL_2020_04_06/","content":"\n\n### webpack\n- [font 설정 시](https://stackoverflow.com/questions/45489897/load-fonts-with-webpack-and-font-face), 이제까지 url-loader라 알고있었는데 loader로 file-loader을 사용한다.\n\n\n### 일정 관리\n> 세분화 했고, 할 수 있다고 생각한 일정이 역시나 너무 빡빡하게 계획해버렸다.\n\n\n- 단순 작업시간만을 요하는게 아니다.\n- 기획의도 파악 + 커뮤니케이션\n- 디자인 인터렉션(ex.swipe+scroll = fullpage.js) 및 복잡한 ui(graph) 추가 공수 산정\n- 백엔드 개발을 위한 마크업 변경 대응(한가지를 다양한 방법으로 구현할 수 있어야함)\n\n\n### thoughts\n- 애송이, 애송이, 아직도..\n","tags":["TIL"]},{"title":"TIL_2020_04_05","url":"/2020/04/05/TIL_2020_04_05/","content":"\n### git\n- 기존에 가지고 있던 레파지토리 정리중\n\n\n### # issue\n\n##### # 현상\n - 잘 올라간줄 알았던 파일이 정상적으로 푸쉬되지 않음\n - 100M 이상 파일일때 오류 발생\n \n \n ##### # 해결\n -> [git lfs 사용](https://arclab.tistory.com/216) \n\n\n### thoughts\n- git hub 서브 모듈도 한번 생각해 볼 것\n- 추가적으로 브랜치 관리 전략(git-flow)읽어 볼 것.\n\n\n### references\n- [git lsf](https://git-lfs.github.com/)\n- [브랜치 관리 전략](http://wiki.webnori.com/pages/viewpage.action?pageId=10813480)\n","tags":["TIL"]},{"title":"TIL_2020_04_03","url":"/2020/04/03/TIL_2020_04_03/","content":"\n### 일정관리\n> 효과적인 일정 산출을 위한 고찰\n\n\n1. 일정 산출하는 데도 일정이 필요하다(기획서 분량에 따라 1~3일)\n1. 상세 기획서 분석\n1. 기획서에 쓰이는 모든 명사는 변수, 모든 동사는 함수로 추려내기\n1. 스토리 -> 테스크 -> 상세 테스크로 세분화(작업 세분화 될 수록 더욱 정확한 일정 산추이 가능)\n1. 작업 우선 순위 번호 매김\n1. 테스크 별 시간 단위 일정 산정(예측)\n1. 테스크 별 일정에 버퍼 추가(30% 가량 증가)\n1. 합산된 총 일정에서 디버깅 / 리팩토링 / 텍스트 기간 추가 (30% 가량 증가)\n1. 작업 우선 순위와 사업팀의 데드라인 고려하여 최종 개발 스펙 정함\n\n#### references \n- [게임 개발자 스스로 하는 일정 관리법](https://www.slideshare.net/ddayinhwang9/ss-60191430)\n- [개발 일정 관리](https://kldp.org/node/106430)\n- [일정관리 를 위한 3가지 조언](https://benpark.tistory.com/208)\n\n\n### thoughts\n늘 일정은 촉박했고, 그 와중에도 효율적으로 일정관리를 하려고 노렸했다.\n초기에 가장 많이 했던 방법은 head first.\n매번 방식이 틀렸지만, 본질은 같은 것.\n바쁘다는 핑계로 지나간 서류들을 정리해 봐야겠다.\n\n**설계 40% / 코딩 20% / 디버깅 40%**\n","tags":["TIL"]},{"title":"TIL_2020_04_02","url":"/2020/04/02/TIL_2020_04_02/","content":"\n### 웹팩\n퍼블리싱을 위한 웹팩 모듈화 설정 구상중\n\n#### # Issue\n- windows OS 환경에서 webpack build 파일이 돌아가지 않는다.\n- 한글이 꺠져보이고, 기준 라우터가 제대로 돌지 않는다.\n\n### # solve\n- [IIS(Internet Information Service) 설정](https://genesis8.tistory.com/209)\n- html 파일 내부 주석처리된 파일들의 루트 재설정 해주기\n\n\n### thoughts\n - 이전에 웹팩 사용시에 겪지 않은 문제라 다시 확인해봐야 할거 같다.\n - 아직 모르는게 이렇게나 많다.\n","tags":["TIL"]},{"title":"TIL_2020_03_24","url":"/2020/03/24/TIL_2020_03_24/","content":"\n### Studying Web\n- [How the Internet Works in 5 Minutes](https://www.youtube.com/watch?v=7_LPdttKXPc)\n- [ISP(Internet Service Provider)](https://nittaku.tistory.com/8): 인터넷 서비스를 판매하여 공급해주는 업체(ex. KT나 SKT)라 생각 하면된다.\n- [DSL(Domain-specific language)](https://ko.wikipedia.org/wiki/%EB%8F%84%EB%A9%94%EC%9D%B8_%ED%8A%B9%ED%99%94_%EC%96%B8%EC%96%B4):도메인 특화 언어(ex. HTML, GNU Emacs, XEmacs등)\n- [통계에 기반한 학습](https://opentutorials.org/course/3084/18452)\n\n### thoughts\n- 개인적으로 네트워크에 대해서 더 배우고 싶었는데, [영상들](https://opentutorials.org/course/3276/20296)로 조금씩 시도해보려고 한다.\n- 웹 전반에 대한 공부를 더하면서, 단단하게 조금씩 발전해 가자.\n","tags":["TIL"]},{"title":"TIL_2020_03_23","url":"/2020/03/23/TIL_2020_03_23/","content":"\n\n### Studying Web\n- [Google Developers](https://developers.google.com/web)\n- [How do I start to design my website?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Thinking_before_coding)\n- [How does the Internet work?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work)\n\n기술적인 부분의 중요성은 아무리 강조해도 지나치지 않다.\n허나,\n현재는 CS 기초지식부터,\n프로젝트 방향설정을 위한 목표을 명확히 하는 방법에 대해서 더 공부하고 있다.\n\n","tags":["TIL"]},{"title":"+1 Array","url":"/2020/03/21/1-Array/","content":"\n## Kata\nGiven an array of integers of any length, return an array that has 1 added to the value represented by the array.\n\nthe array can't be empty\nonly non-negative, single digit integers are allowed\nReturn nil (or your language's equivalent) for invalid inputs.\n\nExamples\nFor example the array [2, 3, 9] equals 239, adding one would return the array [2, 4, 0].\n\n[4, 3, 2, 5] would return [4, 3, 2, 6]\n\n\n\n### # Other Answer \n> bignumber 라이브러리 사용\n\n```javascript\nconst BigNumber = require('bignumber.js');\n\nconst upArray = arr =>\n  arr.length === 0 || arr.filter(x => x < 0 || x > 9).length > 0\n    ? null\n    : (new BigNumber(arr.join('')).plus(1))\n        .toPrecision()\n        .split('')\n        .map(Number);\n```\n\n### # thoughts\n- js 에서 일정 범위를 넘으면 숫자가 그대로 표현되지 않는다.\n- 쉬운 문제였지만 오래걸렸던 것은 이 숫자를 어떻게 풀어내느냐가 관건\n\n\n## references\n- [BigInt](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt)\n- [bignumber.js](https://www.versity.co/node_modules/mysql/node_modules/bignumber.js/doc/API.html)\n- [JS에서의 64비트 부동소숫점](https://medium.com/@rnrjsah789/js%EC%97%90%EC%84%9C%EC%9D%98-64%EB%B9%84%ED%8A%B8-%EB%B6%80%EB%8F%99%EC%86%8C%EC%88%AB%EC%A0%90-c95e0cfec2b2)\n","tags":["codewars"]},{"title":"TIL_2020_03_16-17","url":"/2020/03/17/TIL_2020_03_17/","content":"\n\n### WIKI\n- 개인 위키 작업이 있을 경우, TIL에 소홀해진다.\n- 현재는 이전에 작업한 소스들이 폴더로 구성되어 있는데, 그것들을 풀어서, 문서화하려고 한다.\n- 오늘은 프로젝트를 시작할 때마다 고민했던 용어정의. 정말 동상이몽이란 말이 맞는 것 같다. 그래서 더욱이 대화를 많이 하려고 노력한 것도 있었고. 새로운 것도 많이 생겨났지만 매번 부르는게 달라지니까.\n\n\n\n### git\n> 여전히 커밋메세지에 대한 고민\n\n\n- 포맷을 갖고 가야할 것 같다.\n- [modify?, amend?, revise?](https://theqoo.net/square/479075602)\n- 가벼운 수정이 많으니까 edit 으로 가져가는 것이 좋을 거 같다.\n- 커밋 종류에따라 doc:, feature: 등으로 구분하고 바뀐 폴더나 파일, 그리고 무엇이 바뀌었는지 간단히 적어주려고 한다.\n- 현재 블로그나 위키 쪽은 문서밖에 없어서, prefix 로 doc:를 달아주지 않고 있다.\n- 좋은 포맷을 더 생각해 봐야겠다.\n\n> 취약성 얼럿(Security Alert)\n- [Github의 취약성 알림 대처 방법](https://blog.sonim1.com/225)\n- 해당 프로젝트에 alert으로 뜨는 패키지(최신 라이브러리)를 install -D 해준다.\n```text\n  npm update [해당패키지네임]\n  \n  npm -D install [해당패키지네임]\n```\n\n\n\n### JavaScript 30 시작\n- 리액트로 토이프로젝트를 준비하는 도중.. 기본에 충실하고 싶은 마음이 마구마구 넘쳐버렸다.😜🤷‍♂️\n- 오랜만에 pure.js 로 작업하니, 역시나 코드가 길어지고 불편한 느낌이 있다.\n- 하지만 이 덕에 프레임워크나 리액트같은 라이브러리의 소중함을 알게 되는거니까.\n- 이왕 다시보는 기본기 단단하게 다져가고 싶다.\n","tags":["TIL"]},{"title":"TIL_2020_03_15","url":"/2020/03/15/TIL_2020_03_15/","content":"\n\n###  package-lock.json 필요성\n- 배포시 package.json 고정을 위해 필요\n- 운영 개발자가 lock된 파일을 git 에 업데이트 한다.\n#### # references\n- [package-lock.json](https://swoo1226.tistory.com/114)\n\n\n### 마크업 팁(markup tip)\n- 레이아웃 구조 분석\n- 레이아웃을 최소한으로 재배치(반응형)\n- 많은 재배치는 유지보수, UX에 좋지 않다.\n- Wire-frame(전반적인 구조) 만들기\n- 최대한 시멘틱 태그\n- 커다란 덩어리로 보자\n- css 적용할 때, 범위를 작게 작게 잡아준다. but selector 길어지지 않게.\n- css 모듈화를 중요 -> post.css 필요\n\n#### # references\n- [HTML,CSS 클론 - 드링코딩 by 엘리](https://www.youtube.com/watch?v=67stn7Pu7s4&t=13s)\n\n\n### thoughts\n- html 강의는 4년만에 처음 봤는데, 깔끔하게 정리되는 느낌\n- 사실 본인은 [젠코딩(Zen coding)](https://www.youtube.com/watch?time_continue=443&v=nbuAKx3KEXY&feature=emb_title)을 (태그 한두개씩) 간단하게만 사용하고 있는데,\n위의 강의에서 자유자재로 사용하는 것보고 생산성이 엄청나다는 걸 느낌.\n- 구조적으로 더 생각하게 되고, 개발자스럽다?라고 느낌\n- 역시 아는 것도 다시 보는게 이렇게 중요하구나..\n- [css에서도 var 사용가능 하지만 현재는 ie에서 사용 불가](https://developer.mozilla.org/ko/docs/Web/CSS/Using_CSS_custom_properties)\n","tags":["TIL"]},{"title":"TIL_2020_03_14","url":"/2020/03/14/TIL_2020_03_14/","content":"\n\n### git\n- 지난 wiki 레파지토리가 다 합쳐서 사용하려고 했는데 그 히스토리를 사용하는건 무리가 있다고 판단, 깃 히스토리 삭제(초기화)가 필요했다.\n- 결국 기존 잔디는 다 날아가는 것이지만 무릎쓰고 진행\n\n현재 윈도우 기준\n\n\n1_ 깃 파일 삭제\n    ```text\n      rm .git\n    ```\n   \n   \n2_ 이전과 동일하게 새로운 깃 설정\n  ```text\n  git init\n  git add .\n  git commit -m \"first commit\"\n  git remote add origin [git remote url]\n  git push origin master\n  ```\n\n\n### thoughts\n- [더 괜찮은 개발자가 되기 위한 프로젝트 더보기](https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=183883234)라는 책을 요즘 보고 있다.\n- 이제 코드뿐만 아니라 커뮤니케이션의 중요성, 팀워크 등 전체적으로 돌아가는 것에 대해서 감으로만 익혔던 거 같다. 프로젝트를 보는 시각의 정리하는데 예상했던 것보다 많은 도움이 된다.\n","tags":["TIL"]},{"title":"TIL_2020_03_12","url":"/2020/03/12/TIL_2020_03_12/","content":"\n\n### JS 다시보기\n- 일반 함수는 this 에 바이딩할 객체가 동적으로 결정됨\n- 화살표 함수는 함수를 선언할때 this 에 바이딩할 객체가 정적으로 결정됨. 언제나 상위 스코프 this(lexical this)\n- 화살표 함수는 call, apply, bind 메소드를 사용하여 this를 변경할 수 없다.\n- 화살표 함수를 사용해서는 안되는 경우\n   > 메소드, prototype, 생성자 함수(화살표 함수는 prototype 프로퍼티가 없다.), addEventListener함수\n\n### git\n> 브랜치 삭제하기\n\n\n```text\n  $ git branch -d <branchname>\n  \n  // 결과 확인\n  $ git branch\n  * master\n```\n\n> fetch vs. pull\n\n\n- pull: 원격 저장소의 내용을 가져와 자동으로 병합 작업을 실행(fetch + merge)\n- fetch: 단순히 원격 저장소의 내용을 확인만 하고 로컬 데이터와 병합은 하지 않는 경우\n\n\n> 깃허브 오픈 소스 기여(Contribute)\n\n\n```\n  git clone [해당 레파지토리 깃허브주소]\n\n  git remote\n  # origin\n\n git remote add upstream [해당 레파지토리 깃허브주소]\n\n  git remote\n  # origin\n  # upstream\n\n  git pull upstream master // fork한지 얼마 되지 않았지만 변경사항 확인차  pull\n\n  git push // 변경사항 update\n```\n이후 PR(pull request)\n\n\n### # references\n- [화살표 함수](https://poiemaweb.com/es6-arrow-function)\n- [fetch, 원격 저장소의 데이터를 로컬에 가져오기만 하기](https://backlog.com/git-tutorial/kr/stepup/stepup3_2.html)\n- [오픈소스 기여를 위한 GITHUB 개념정리](http://guruble.com/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EC%BB%A8%ED%8A%B8%EB%A6%AC%EB%B7%B0%ED%84%B0%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%98%EB%8A%94-%EA%B2%83/)\n","tags":["TIL"]},{"title":"Math Issues","url":"/2020/03/11/Math-Issues/","content":"\n## Kata\nOh no, our Math object was \"accidently\" reset. Can you re-implement some of those functions? We can assure, that only non-negative numbers are passed as arguments. So you don't have to consider things like undefined, null, NaN, negative numbers, strings and so on.\n\nHere is a list of functions, we need:\n\nMath.round()\nMath.ceil()\nMath.floor()\n\n\n### # My Solutions\n```javascript\nvar _int, _float;\n\nfunction checkPeriod(num) {\n  _float = num%1;\n  _int = num - _float;\n}\n\nMath.round = function(number) {\n  checkPeriod(number);\n  return _float >= 0.5 ? _int + 1 : _int;\n};\n\nMath.ceil = function(number) {\n  checkPeriod(number);\n  return _float > 0 ? _int + 1 : + _int;\n};\n\nMath.floor = function(number) {\n  checkPeriod(number);\n  return _int;\n};\n```\n\n### # Others\n> parseInt, isInteger 메소드를 적절히 사용\n\n```javascript\nMath.floor = number => parseInt(number)\nMath.round = number => Math.floor(number + 0.5)\nMath.ceil  = number => Number.isInteger(number) ? number : Math.floor( number + 1 )\n```\n\n\n### # thoughts\n- 간단한 건 직접 구현해보는 것도 좋은 공부\n- MDN 폴리필도 꼭 한번씩 확인, 읽어보는 습관 갖기 \n\n\n## references\n- [Number.parseInt()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt)\n\n","tags":["codewars"]},{"title":"TIL_2020_03_10","url":"/2020/03/10/TIL_2020_03_10/","content":"\n\n### thoughts\n- git repo 정리하는데, 하루가 다가버렸다. 이렇게 분석, 설계가 중요한거다..\n- *개인 위키 정리 하기 - 무리 하지 말고 하나씩 해나가야지\n- 한달정도 일일커밋 결과, 잔디 심는 맛이 쏠쏠하다. 기록함으로서 얻는 기쁨.\n- 허나 가공되지 않은.. 날 것의 컨텐츠만 올리고 있는 거 같다.\n","tags":["TIL"]},{"title":"Array.diff","url":"/2020/03/09/Array-diff/","content":"\n## Kata\nYour goal in this kata is to implement a difference function, which subtracts one list from another and returns the result.\n\nIt should remove all values from list a, which are present in list b.\n```javascript\n    arrayDiff([1, 2], [1]) == [2]\n```\n\nIf a value is present in b, of its occurrences must be removed from the other:\n```javascript\n  arrayDiff([1,2,2,2,3].[2]) == [1,3]\n```\n\n\n### # My Solutions\n```javascript\nfunction arrayDiff(a, b) {\n  return a.filter(aItem => !b.includes(aItem));\n}\n```\n\n\n### # Others\n```javascript\nfunction array_diff(a, b) {\n  return a.filter(function(x) { return b.indexOf(x) == -1; });\n}\n```\n\n### # thoughts\n- 어렵지 않았으나 변수명을 어떻게 지을지가 막혔다.\n","tags":["codewars"]},{"title":"TIL_2020_03_09","url":"/2020/03/09/TIL_2020_03_09/","content":"\n\n### git\n- 열정과다로 만들어진 깃 레파지토리 정리\n- 그냥 레파지토리를 지우면 소중한 잔디들이 없어진다.(아래링크 참조)\n#### # references\n- [서로 다른 저장소를 하나의 저장소로 합치기](https://github.com/uyu423/TIL/blob/master/git%EA%B3%BC%20Github/%EC%84%9C%EB%A1%9C%20%EB%8B%A4%EB%A5%B8%20%EC%A0%80%EC%9E%A5%EC%86%8C%EB%A5%BC%20%ED%95%98%EB%82%98%EC%9D%98%20%EC%A0%80%EC%9E%A5%EC%86%8C%EB%A1%9C%20%ED%95%A9%EC%B9%98%EA%B8%B0.md)\n- [Git 저장소를 병합하는 방법(How to merge repositories in Git)](https://mansoo-sw.blogspot.com/2017/08/git-repository-merge.html) \n\n\n### thoughts\n- TIL에 중복되는 기본 개념들은 개인 위키를 만들어 정리필요\n- README 더 잘 쓰고 싶다.\n- 리액트로 토이프로젝트 하나 생각중..\n\n\n### 읽을거리\n- [코드리뷰, GitHub로 바로 적용하기](https://academy.realm.io/kr/posts/codereview-howto/)\n- [프로그레시브 웹 앱 소개](https://developer.mozilla.org/ko/docs/Web/Progressive_web_apps/%EC%86%8C%EA%B0%9C)\n","tags":["TIL"]},{"title":"Prefill an Array","url":"/2020/03/08/Prefill-an-Array/","content":"\n ## Kata\nCreate the function prefill that returns an array of n elements that all have the same value v. See if you can do this without using a loop.\n\nYou have to validate input:\n\nv can be anything (primitive or otherwise)\nif v is ommited, fill the array with undefined\nif n is 0, return an empty array\nif n is anything other than an integer or integer-formatted string (e.g. '123') that is >=0, throw a TypeError\nWhen throwing a TypeError, the message should be n is invalid, where you replace n for the actual value passed to the function.\n\nCode Examples:\n```text\n    prefill(3,1) --> [1,1,1]\n\n    prefill(2,\"abc\") --> ['abc','abc']\n\n    prefill(\"1\", 1) --> [1]\n\n    prefill(3, prefill(2,'2d'))\n      --> [['2d','2d'],['2d','2d'],['2d','2d']]\n\n    prefill(\"xyz\", 1)\n      --> throws TypeError with message \"xyz is invalid\"d\n```\n\n### # My Solutions\n```javascript\nfunction prefill(n, v) {\n  switch(true) {\n    case(n !== false && Number(n) === 0):\n      return [];\n    case(isNaN(Number(n)) || n<0 || n % 1 !== 0 || typeof n == 'boolean'):\n      throw new TypeError(`${n} is invalid`);\n    default:\n      return new Array(n).fill(v);\n  }\n}\n```\n\n\n### # thoughts\n - 주로 try-catch 처리만 했지, new Error 설정한 경험이 많이 없었는데, 재밌었다.\n - n % 1 !== 0 로 소수점이하 숫자의 유무를 확인할 수 있다.\n - 간단하지만 안해봐서 생각보다 오래 걸렸다. \n \n\n## references\n- [Error 객체에 관하여](https://www.zerocho.com/category/JavaScript/post/5c1913622e014f001e827a89)\n\n","tags":["codewars"]},{"title":"TIL_2020_03_07-08","url":"/2020/03/08/TIL_2020_03_08/","content":"\n\n### Jest\n- 노드 환경이라 es06 문법(import)이 동작하지 않았다. 재설정 필요\n- 본인의 경우 노드 문법으로 통일(require - module.exports)\n\n#### # references\n- [jest test에서 import 를 못 쓰네요?](https://velog.io/@noyo0123/jest-test%EC%97%90%EC%84%9C-import-%EB%A5%BC-%EB%AA%BB-%EC%93%B0%EB%84%A4%EC%9A%94-pik230v1hp)\n- [자바스크립트 CommonJS 모듈 내보내기/불러오기 (require)](https://www.daleseo.com/js-module-require/)\n- [자바스크립트 ES6 모듈 내보내기/불러오기 (import)](https://www.daleseo.com/js-module-import/)\n- [JavaScript 표준을 위한 움직임: CommonJS와 AMD](https://d2.naver.com/helloworld/12864)\n\n\n### JS 기초\n- [reduce](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)\n- 메모이제이션 다시보기\n\n### 읽을거리\n- [React SEO(Search Engine Optimization) 검색 사이트 최적화 컴포넌트](https://sujinlee.me/react-seo/)\n- [필독* - 깃허브로 취업하기](https://medium.com/@hongkevin/js-5-es6-map-set-2a9ebf40f96b)\n","tags":["TIL"]},{"title":"TIL_2020_03_06","url":"/2020/03/06/TIL_2020_03_06/","content":"\n### Jest\n- [mock](https:///www.daleseo.com/jest-fn-spy-on) 문법 익히기\n\n\n\n### 프론트 이론 다시보기\n- [Using node.js require vs. ES06 import.export](https://stackoverflow.com/questions/31354559/using-node-js-require-vs-es6-import-export)\n> vue.js 에서 import, export 사용, 이전에 혼용한 경험이 있어서 다시 찾아보았다.\n\n\n### git command 습관 들이기\n- 깃 메세지 수정(amend the git msg)\n\n```text\n  git commit --amend -m \"수정메세지 내용\"\n```\n\n- 하나의 파일만 커밋하고 싶을떄([How to git commit a single file/directory](https://stackoverflow.com/questions/8795097/how-to-git-commit-a-single-file-directory))\n\n```text\n  git commit -m 'my notes' path/to/my/file.ext\n  \n  git commit -o path/to/myfile -m \"the message\"\n  // -o, --only commit only specified files\n```\n\n- 스테이징에 있는 파일 목록 보기([git liist of staged filse](https://stackoverflow.com/questions/33610682/git-list-of-staged-files))\n> [git-diff example](https://git-scm.com/docs/git-diff#_examples)\n\n\n```text\n  git diff --name-only --cached\n```\n\n\n- windows환경에서 touch 작동 안함\n> [Windows equivalent of 'touch' (i.e. the node.js way to create an index.html)](https://stackoverflow.com/questions/30011267/windows-equivalent-of-touch-i-e-the-node-js-way-to-create-an-index-html)\n\n```text\n    // not working\n    touch index.html app.js style.css\n    \n    // work\n     echo > your_file.txt\n     type nul > your_file.txt\n```\n\n","tags":["TIL"]},{"title":"TIL_2020_03_05","url":"/2020/03/05/TIL_2020_03_05/","content":"\n### Jest\n- [전/후 처리 테스트 익히기](https://www.daleseo.com/jest-before-after/)\n\n### NPM\n#### # --save-exact?\n```\nnpm install --save --save-exact socket.io express\n```\n- npm install 명령어에 --save-exact 옵션을 지정하면 설치된 버전을 범위 지정없이 기록한다.\n- dependencies에 추가한 패키지 버전 앞에 ^(캐럿)은 패키지 버젼을 지정하지 않을 때 뿐만 아니라 --save-exact 옵션을 지정하지 않으면 기본적으로 추가되는 것이다. 이 ^(캐럿)은 이후 해당 패키지의 버전이 업데이트 되었을 경우, 마이너 버전 범위 내에서 업데이트를 허용한다는 의미\n\n### # references\n- [모듈화와 npm(node package manager)](https://poiemaweb.com/nodejs-npm)\n\n### thoughts\n- 이전 프로젝트에서 채팅을 폴링(polling)방식으로 구현했었는데, 드디어 미뤘던 socket.io로 다시 공부했다.\n- json dummy generator 도 다시 만들어 보았다.(postman없이 웹스톰에서도 api 테스트가 가능하다.)\n- 늦었지만 다시 보고 느끼는 바가 크다. 지금이라도 기록하고 다시봐서 다행이다.\n\n\n### 읽을거리\n- [의사코드](https://medium.com/djangogirlsseoul-codecamp/%EC%9D%98%EC%82%AC%EC%BD%94%EB%93%9C-pseudo-code-%EB%9E%80-d892a3479b1d)\n\n\n","tags":["TIL"]},{"title":"TIL_2020_03_04","url":"/2020/03/04/TIL_2020_03_04/","content":"\n\n### TypeScript\n- 레파지토리 생성, 기본 문법 익히기\n\n\n### Jest\n- [비동기 코드 테스트 익히기](https://www.daleseo.com/jest-async/)\n\n\n### 프론트 이론 다시보기\n- [Promise 메서드 체이닝](https://www.daleseo.com/js-async-promise/)\n- [acync/await](https://www.daleseo.com/js-async-async-await/)\n- [MDN - this](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this) + arrows func\n\n\n### 명령어\n#### # -r 이 무엇일까?\n```text\n  git rm -r --cached .\n```\n- -r: allow recursive removal 하위 경로와 그 안에 있는 모든 파일들도 같이 나열\n- *fatal: not removing '.' recursively without -r\n\n#### # touch[파일이름] : 빈파일 생성\n```text\n  touch index.html // 현 위치에 index.html 파일 생성\n```\n\n\n\n### 알고리즘\n#### # [간단하지만 알면 좋은 최적화들](https://kim6394.tistory.com/231?category=657064)\n- for문 안에서 변수 선언 vs. **for문 밖에서 변수선언**\n> => for문 밖에서 선언이 더 빠르다.\n\n\n- **재귀함수 파라미터를 전역으로 선언한 것** vs. 재귀함수를 모두 파라미터로 넘겨준 것\n> 함수를 계속해서 호출할 때, 스텍에 쌓인다.\n>\n> 파라미터들은 함수를 호출할 때마다 메모리 할당하는 동작을 반복하게 된다.\n>\n> 따라서 지역변수로 사용하지 않는 것들은 전역변수로 빼야한다. \n\n\n\n### 읽을거리\n- [클린코드와 리펙토링](https://kim6394.tistory.com/213?category=657064)\n- [파일, 폴더 생성 및 내용 출력 명령어](https://limetimeline.tistory.com/43)\n","tags":["TIL"]},{"title":"TIL_2020_03_03","url":"/2020/03/03/TIL_2020_03_03/","content":"\n### Jest\n- 레파지토리 생성, 기본 문법 익히기\n\n\n### Coding Challenges\n- 주는 codewars\n- [hackerrank](https://www.hackerrank.com/dashboard)은 아직 기초부터 도장을 깨고 있다.\n\n\n### 프론트 이론 다시보기\n- [자바스크립트와 이벤트 루프](https://meetup.toast.com/posts/89)\n- [MDN - this](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this)\n\n\n### git\n- editor 와 command line 섞어서 사용중\n- command 쪽으로 이동중\n- [Adding an existing project to GitHub using the command line](https://help.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line)\n\n\n### thoughts\n- '늘 적용해야지'하고 못했던 jest를 사용해 본 것만으로도 알찬 하루\n\n\n### references\n- [The 10 Best Coding Challenge Websites for 2018](https://medium.com/coderbyte/the-10-best-coding-challenge-websites-for-2018-12b57645b654)\n","tags":["TIL"]},{"title":"Sort the odd","url":"/2020/03/02/Sort-the-odd/","content":"\n## Kata\nYou have an array of numbers.\nYour task is to sort ascending odd numbers but even numbers must be on their places.\n\nZero isn't an odd number and you don't need to move it. If you have an empty array, you need to return it.\n\nExamples:\n```javascript\n    sortArray([5, 3, 2, 8, 1, 4]) == [1, 3, 2, 8, 5, 4]\n```\n\n### # My Solutions\n```javascript\nfunction sortArray(array) {\n  let oddArr = [], evenObj = [], result = [];\n  array.forEach((x, idx) => {\n    (x%2)? oddArr.push(x) : evenObj.push({'idx': idx, 'val': x})\n  });\n  oddArr.sort((a, b) => a - b);\n  for(let i=0;i<array.length;i++){\n    if(evenObj[0] && evenObj[0]['idx'] === i) {\n      result.push(evenObj[0]['val']);\n      evenObj.shift();\n    } else {\n      result.push(oddArr.shift());\n    }\n  }\n  return result;\n}\n```\n\n### # Others\n> Best Practices\n\n```javascript\nfunction sortArray(array) {\n  const odd = array.filter((x) => x % 2).sort((a,b) => a - b);\n  return array.map((x) => x % 2 ? odd.shift() : x);\n}\n```\n\n```javascript\nfunction sortArray(array) {\n  var odds = [];\n  //loop, if it's odd, push to odds array\n  for (var i = 0; i < array.length; ++i) {\n    if (array[i]%2 !== 0) {\n      odds.push(array[i]);\n    }\n  }\n  //sort odds from smallest to largest\n  odds.sort(function(a,b){\n    return a-b;\n  });\n  \n  //loop through array, replace any odd values with sorted odd values\n  for (var j = 0; j < array.length; ++j) {\n    if (array[j]%2 !== 0) {\n      array[j] = odds.shift();\n    }\n  }\n  \n return array;\n}\n```\n\n\n### # thoughts\n - 짝수값을 [] { index: idx, val: value }, .. ] 객체 배열로 만들 필요가 없었다.\n - 배열로만으로 구현 가능\n - odd 배열을 뽑아+정렬 한값을 map내부에서 ㅁ돌리는 첫번재 풀이.. 멋지다.\n - shift() 보다 pop() 이 성능상 더 빠르다고 한다. sort 시, b - a 으로 변경하는게 좋을듯\n","tags":["codewars"]},{"title":"TIL_2020_03_02","url":"/2020/03/02/TIL_2020_03_02/","content":"\n\n### codewars\n- best practice 복기\n\n### git\n- fork 뜬 파일 = 메인 레파지토리 = upstream\n- fork된 repository를 로컬로 clone\n- 자신의 fork repository가 origin으로 이미 설정되어 있음\n- 메인 repository를 upstream이란 이름으로 설정\n\n```\n$ git remote add upstream 메인레파이토리URL\n```\n\n```\n$ git remote\norigin\nupstream\n```\n위의 결과가 나와야 설정완료\n\n\n#### #references\n- [github 환경에서의 실전 Git 레시피](https://meetup.toast.com/posts/116)\n- [[Git] Upstream, Downstream, Origin](https://developer-alle.tistory.com/315)\n\n\n### thoughts\n- HackerRank 라는 코딩첼린지 사이트도 이용해보고자 한다.\n- 이론을 적용하는건 역시 어렵구나.. 연습..연습..코딩..코딩\n\n\n### references\n- [The 10 Best Coding Challenge Websites for 2018](https://medium.com/coderbyte/the-10-best-coding-challenge-websites-for-2018-12b57645b654)\n","tags":["TIL"]},{"title":"Simple Encryption #1 - Alternating Split","url":"/2020/03/01/Simple-Encryption-1-Alternating-Split/","content":"\n## Kata\nFor building the encrypted string:\nTake every 2nd char from the string, then the other chars, that are not every 2nd char, and concat them as new String.\nDo this n times!\n\nExamples:\n```text\n    \"This is a test!\", 1 -> \"hsi  etTi sats!\"\n    \"This is a test!\", 2 -> \"hsi  etTi sats!\" -> \"s eT ashi tist!\"\n```\n\nWrite two methods:\n```javascript\n    function encrypt(text, n);\n    function decrypt(encryptedText, n);\n```\nFor both methods:\nIf the input-string is null or empty return exactly this value!\nIf n is <= 0 then return the input text.\n\n\n### # My Solutions\n```javascript\nfunction encrypt(text, n) {\n  if(n<=0) return text;\n  if(text==null) return null;\n  \n  let result;\n  let arrEven = [], arrOdd = [];\n  let textArr = text.split('');\n  \n  for(let i=0;i<n;i++){\n    for(let r=0;r<textArr.length;r++) {\n      (r%2)?arrOdd.push(textArr[r]):arrEven.push(textArr[r]);\n    }\n    textArr = arrOdd.join('')+arrEven.join('');\n    arrOdd = [];\n    arrEven = [];\n  }\n  result = textArr;\n  return result;\n}\n\nfunction decrypt(encryptedText, n) {\nif(n<=0) return encryptedText;\nif(!encryptedText.length) return '';\n  \n  for(let r=0;r<n;r++) {\n    let len = encryptedText.length;\n    let divider = (len%2)? (len/2)+1 : len/2;\n    let arrEven = encryptedText.slice(-divider || 0).split(''), arrOdd = encryptedText.slice(0, divider || 0).split('');\n    encryptedText = [];\n    for(let i=0;i<len;i++){\n      let val = (i%2)? arrOdd.shift() : arrEven.shift();\n      encryptedText.push(val);\n  //     result.push(val);\n    }\n    encryptedText = encryptedText.join('');\n  }\n  return encryptedText;\n}\n```\n\n### # Others\n> 정규식으로 풀이\n\n```javascript\nfunction encrypt(text, n) {\n  for (let i = 0; i < n; i++) {\n    text = text && text.replace(/.(.|$)/g, '$1') + text.replace(/(.)./g, '$1') \n  }\n  return text\n}\n\nfunction decrypt(text, n) {\n  let l = text && text.length / 2 | 0\n  for (let i = 0; i < n; i++) {\n    text = text.slice(l).replace(/./g, (_, i) => _ + (i < l ? text[i] : ''))\n  }\n  return text\n}\n```\n\n> reduce() 메소드 사용\n\n```javascript\nfunction encrypt(text, n=0) {\n  return n<1 || text==null ? text : encrypt( [...text].reduce(([a,b],v,i)=> i%2 ? [a+v,b]:[a,b+v],['','']).join(''), n-1)\n}\n\nfunction decrypt(text, n) {\n  return n<1 || text==null ? text : decrypt( [...text].slice(text.length/2).map((v,i) => v+text[i] ).join('').slice(0,text.length), n-1)\n}\n```\n\n\n> replace() 메소드 사용\n\n```javascript\nfunction encrypt(text, n) {\n  if (!text || !text.length || n <= 0)\n  {\n    return text;\n  }\n\n  var res = \"\";\n  var oth = \"\";\n\n  for (var i = 0; i < text.length; ++i)\n  {\n    if (i % 2 == 0)\n    {\n      oth += text[i];\n    }\n    else\n    {\n      res += text[i];\n    }\n  }\n\n  return encrypt(res + oth, --n);\n}\n\nfunction decrypt(encryptedText, n) {\n  if (!encryptedText || !encryptedText.length || n <= 0)\n  {\n    return encryptedText;\n  }\n\n  var first = encryptedText.slice(0, encryptedText.length / 2);\n  var second = encryptedText.slice(encryptedText.length / 2);\n  \n  var res = \"\";\n  var i = 0;\n  var j = 0;\n\n  while (res.length < encryptedText.length)\n  {\n    if (res.length % 2 == 0)\n    {\n      res += second[i];\n      i++;\n    }\n    else\n    {\n      res += first[j];\n      j++;\n    }\n  }\n\n  return decrypt(res, --n);\n}\n```\n\n\n### # thoughts\n - 문제 이해하는데 시간 소모가 컸다.\n - reduce() 풀이는 복기 필요 \n\n\n## references\n- [정규식(Regular Expressions)](https://beomy.tistory.com/21)\n- [MDN - String.prototype.replace()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n- [MDN - Array.prototype.reduce()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)\n\n","tags":["codewars"]},{"title":"TIL_2020_03_01","url":"/2020/03/01/TIL_2020_03_01/","content":"\n### Codewars\n> 1일 1코드워 노력중\n- 6kyu 이상만 따로 포스팅\n \n### 프론트 이론 다시보기\n> [ToastUI - 자바스크립트의 스코프와 클로저](https://meetup.toast.com/posts/86)\n\n- 함수레벨(var)과 블록 레벨(let, const) 렉시컬 스코프 규칙\n- 렉시컬(lexical) vs. 동적(dynamic) 스코프\n- 블록스코프인 let도 호이스팅이 된다.\n> 하지만, 선언전에 참조할 경우 undefined 반환하지 않고 ReferenceError발생\n- 렉시컬 스코프: 이름의 범위는 소스코드가 작성된 그 문맥에서 바로 결정되는것\n\n### thoughts\n- 이론 + 복기 끝내고, javascript30 도전!!!!\n- 늦어도 코드워 시작하길 잘했다. 얼른 1kyu 찍고 싶다.\n- 설명하지 못하면 결국 모르는 것과 다름없다.\n","tags":["TIL"]},{"title":"Dubstep","url":"/2020/02/29/Dubstep/","content":"\n## Kata\nPolycarpus works as a DJ in the best Berland nightclub, and he often uses dubstep music in his performance. Recently, he has decided to take a couple of old songs and make dubstep remixes from them.\n\nLet's assume that a song consists of some number of words (that don't contain WUB). To make the dubstep remix of this song, Polycarpus inserts a certain number of words \"WUB\" before the first word of the song (the number may be zero), after the last word (the number may be zero), and between words (at least one between any pair of neighbouring words), and then the boy glues together all the words, including \"WUB\", in one string and plays the song at the club.\n\nFor example, a song with words \"I AM X\" can transform into a dubstep remix as \"WUBWUBIWUBAMWUBWUBX\" and cannot transform into \"WUBWUBIAMWUBX\".\n\nRecently, Jonny has heard Polycarpus's new dubstep track, but since he isn't into modern music, he decided to find out what was the initial song that Polycarpus remixed. Help Jonny restore the original song.\n\nInput\nThe input consists of a single non-empty string, consisting only of uppercase English letters, the string's length doesn't exceed 200 characters\n\nOutput\nReturn the words of the initial song that Polycarpus used to make a dubsteb remix. Separate the words with a space.\n\nExample:\n```text\n  songDecoder(\"WUBWEWUBAREWUBWUBTHEWUBCHAMPIONSWUBMYWUBFRIENDWUB\")\n    // =>  WE ARE THE CHAMPIONS MY FRIEND\n```\n\n\n### # My Solutions\n```javascript\nfunction songDecoder(song){\n  let result; // str\n  let arr = song.split('WUB');//Array [\"\", \"WE\", \"ARE\", \"\", \"THE\", \"CHAMPIONS\", \"MY\", \"FRIEND\", \"\"]\n  let newArr = arr.filter(str => {\n    return str.length\n  });\n  result = newArr.join(' ');\n  return result;\n}\n```\n\n### # Others\n> 정규식으로 풀이\n\n```javascript\nfunction songDecoder(song){\n  return song.replace(/(WUB)+/g,\" \").trim()\n}\n```\n\n> split() 사용\n\n```javascript\nvar songDecoder = (song) => song.split('WUB').filter(x => x !== '').join(' ')\n```\n\n```javascript\nfunction songDecoder(song){\n  return song.split('WUB').filter((w) => w).join(' ');\n}\n```\n- filter()는 true인 값만 포함해 새배열을 반환해준다.\n- Boolean(''), !!'' 은 false\n- typeof '' 은 String\n\n\n### # thoughts\n- 문자열(String)은 split() / 배열은 splice()\n- split()문자 그대로 배열에 / splice('') 각 char 배열\n\n\n## references\n- [MDN - String.prototype.split()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n- [MDN - Array.prototype.splice()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\n\n\n","tags":["codewars"]},{"title":"TIL_2020_02_27-28","url":"/2020/02/28/TIL_2020_02_27/","content":"\n\n### codewars\n#### # 문제 1\n> map 사용법 문제 _ Testing 1-2-3\n\n\n문제 생략, 결과 예시만\n```javascript\n    number([]) // => []\n    number([\"a\", \"b\", \"c\"]) // => [\"1: a\", \"2: b\", \"3: c\"]\n```\n#### # 내 답변 \n```javascript\nvar number=function(array){\n  return array.map((val, idx) => {\n    return `${idx+1}: ${val}`;\n  });\n}\n```\n\n#### #  [map](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n- 매개변수: arr.map(callback(currentValue[, index[, array]])[, thisArg])\n     callback\n        새로운 배열 요소를 생성하는 함수. 다음 세 가지 인수를 가집니다.\n        currentValue\n        처리할 현재 요소.\n        index Optional\n        처리할 현재 요소의 인덱스.\n        array Optional\n        map()을 호출한 배열.\n     thisArg Optional\n       callback을 실행할 때 this로 사용되는 값\n\n\n- 변환값: 배열의 각 요소에 대해 실행한 callback의 결과를 모은 새로운 배열.\n\n#### # 문제 2\n> filter 사용법 문제 _ List Filtering\n\n```javascript\n    filter_list([1,2,'a','b']) == [1,2]\n    filter_list([1,'a','b',0,15]) == [1,0,15]\n    filter_list([1,2,'aasf','1','123',123]) == [1,2,123]\n```\n\n#### # 내답변\n```javascript\nfunction filter_list(l) {\n  return l.filter(e => {\n    return typeof e === 'number';\n  })\n}\n```\n\n#### # [filter](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n- 매개변수: arr.filter(callback(element[, index[, array]])[, thisArg])\n  callback\n      각 요소를 시험할 함수.\n      true를 반환하면 요소를 유지하고,\n      false를 반환하면 버립니다. 다음 세 가지 매개변수를 받습니다.\n      element\n      처리할 현재 요소.\n      index Optional\n      처리할 현재 요소의 인덱스.\n      array Optional\n      filter를 호출한 배열.\n  thisArg Optional\n     callback을 실행할 때 this로 사용하는 값.\n\n\n- 반환값: 테스트를 통과한 요소로 이루어진 새로운 배열. 어떤 요소도 테스트를 통과하지 못했으면 빈 배열을 반환합니다.\n\n\n#### # 베스트 답변\n```javascript\nfunction filter_list(l) {\n  return l.filter(Number.isInteger);\n}\n```\n\n### 프론트 이론 다시보기\n> [ToastUI - 성능 최적화](https://ui.toast.com/fe-guide/ko_PERFORMANCE/)\n\n- [레이아웃에 영향을 미치는 것들](https://gist.github.com/paulirish/5d52fb081b3570c81e3a)\n- 다운로드 -> 파싱 -> 스타일 -> 레이아웃(리플로우) -> 페인트 -> 합성\n- 레이아웃이 발생하면 실행 시간만큼 렌더링 시간도 늘어나게 된다. 불필요한 레이아웃을 경계하자. \n\n\n### thoughts\n- 기본개념을 우선으로 잡고 다시 봐야겠다.\n","tags":["TIL"]},{"title":"TIL_2020_02_25-26","url":"/2020/02/26/TIL_2020_02_25/","content":"\n### Vue.js\n- vuetify 사용이 생각보다 시간소모가 크다.\n\n#### # vue-router 다시보기\n- [공식문서](https://router.vuejs.org/kr/guide/essentials/dynamic-matching.html)\n- [[VueJS] Vue-Router 사용하는 방법, 라우트 설정](https://webisfree.com/2019-03-25/[vuejs]-vue-router-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EB%9D%BC%EC%9A%B0%ED%8A%B8-%EC%84%A4%EC%A0%95)\n- [nested router](https://ict-nroo.tistory.com/90)\n\n\n#### # [computed vs. methods 좋은 정리](https://kamang-it.tistory.com/entry/Vue23computed-%EA%B7%B8%EB%A6%AC%EA%B3%A0-methods%EC%99%80%EC%9D%98-%EC%B0%A8%EC%9D%B4featwatch)\n\n#### # [issue  Failed to resolve directive: ripple](https://github.com/DoritoBandito/vuetify-upload-button/issues/14)\n> 해결법1 \"ripple\"을 false로 설정해주기\n>\n>\n> 해결법2\n```javascript\n    import { Ripple } from 'vuetify/lib/directives'\n    \n    Vue.use(Vuetify, {\n      directives: {\n        Ripple\n      }\n    })\n```\n>\n>\n\n### 읽을거리\n - [누구나 한 번쯤은 띄워본 JavaScript 에러 TOP 10.](https://blog.meeta.io/m/10)\n - [oAuth 정리](https://jungle.kim/2018/04/21/oauth/)\n\n\n### thoughts\n- 로그인까지 구현하려다가 API까지 다만들게 생겼다..\n- [Google - oAuth 2.0 Playground](https://developers.google.com/oauthplayground/)\n","tags":["TIL"]},{"title":"Exes and Ohs","url":"/2020/02/26/Exes-and-Ohs/","content":"\n## Kata\nCheck to see if a string has the same amount of 'x's and 'o's. The method must return a boolean and be case insensitive. The string can contain any char.\n\nExample:\n```text\n  XO(\"ooxx\") => true\n  XO(\"xooxx\") => false\n  XO(\"ooxXm\") => true\n  XO(\"zpzpzpp\") => true // when no 'x' and 'o' is present should return true\n  XO(\"zzoo\") => false\n```\n\n\n### # My Solutions\n```javascript\nfunction XO(str) {\n  let oCount = xCount = 0;\n  let tempStrArr = Array.prototype.slice.apply(str);\n  \n  tempStrArr.forEach((str) => {\n    str = str.toLowerCase();\n    if(str === 'o') return oCount++;\n    if(str === 'x') return xCount++;\n  })\n  \n  return oCount === xCount;\n}\n```\n\n### # Others\n> 정규식으로 풀이\n\n```javascript\nfunction XO(str) {\n  let x = str.match(/x/gi);\n  let o = str.match(/o/gi);\n  return (x && x.length) === (o && o.length);\n}\n```\n\n> split() 사용\n\n```javascript\nfunction XO(str) {\n    return str.toLowerCase().split('x').length === str.toLowerCase().split('o').length;\n}\n```\n\n### # thoughts\n- split() 사용한 풀이는 굉장히 새로웠다.\n> split의 반환값(return)은 배열.\n> \n> 위의 풀이는 x, o 를 각각 제외한 배열의 길이로 구현\n\n\n## references\n- [MDN - String.prototype.split()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n- [정규식(Regular Expressions)](https://beomy.tistory.com/21)\n\n","tags":["codewars"]},{"title":"TIL_2020_02_24","url":"/2020/02/24/TIL_2020_02_24/","content":"\n### Vue.js\n- [컴포넌트(고급: props)](https://beomy.tistory.com/56?category=646688)\n> HTML 속성은 대소문자를 구별하지 않습니다.\n>\n> 모든 대문자를 소문자로 인식합니다.\n>\n>Vue에서 HTML을 표현 할 때 보통 kebab-case로 표현하고, JavaScript에서 prop를 받아 사용할 때는 camelCase를 사용합니다.\n\n\n- [vue 스타일 가이드](https://kr.vuejs.org/v2/style-guide/index.html#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%8C%8C%EC%9D%BC-%EB%A7%A4%EC%9A%B0-%EC%B6%94%EC%B2%9C%ED%95%A8)\n> 싱글 파일 컴포넌트 이름은 파스칼(PascalCase) 또는 케밥(kabab-case) 사용\n\n### 읽을거리\n - 컴포넌트 가이드를 위한 좋은 툴 - [Storybook](https://www.learnstorybook.com/)\n - [컴포넌트 제대로 만들기](http://blog.weirdx.io/post/61109)\n\n### thoughts\n- 코드워를 풀고, 오랜만에 lodash를 보면서 감사함을 느낀다.\n- 다음엔 [union](https://lodash.com/docs/4.17.15#union) 직접 구현해 보자. \n- 프론트엔드 가이드 페이지 구현에 storybook 툴 사용해보자.\n","tags":["TIL"]},{"title":"Count the divisors of a number","url":"/2020/02/24/Count-the-divisors-of-a-number/","content":"\n## Kata\nCount the number of divisors of a positive integer n.\n\nRandom tests go up to n = 500000.\n\nExamples\n```javascript\n    divisors(4)  = 3  // 1, 2, 4\n    divisors(5)  = 2  // 1, 5\n    divisors(12) = 6  // 1, 2, 3, 4, 6, 12\n    divisors(30) = 8  // 1, 2, 3, 5, 6, 10, 15, 30\n```\n\n\n### # My Solutions\n```javascript\nfunction getDivisorsCnt(n){\n  let arr = [];\n  for(let i=1;i<500000;i++) {\n    let val;\n    if(n === 1) return n;\n    if(arr.includes(i)) return arr.length;\n    \n    if(!(n%i)) {\n      val = n/i;\n      arr.push(i);\n      if(i !== val) arr.push(val);\n    }\n  }\n}\n```\n\n### # Others\n> for문\n\n```javascript\nfunction getDivisorsCnt(n) {\n  for (var d = 0, i = n; i > 0; i--) {\n    if (n % i == 0) d++;\n  }\n  return d;\n}\n```\n\n### # thoughts\n- 원하는 값은 갯수. 굳이 배열의 길이로 구현하지 않아도 된다.\n- !n%i 로 계산하면 제대로 된 연산이 되지 않는다. !(n%i) 감싸줄 것. \n\n## references\n- [산술연산자](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators)\n","tags":["codewars"]},{"title":"TIL_2020_02_23","url":"/2020/02/23/TIL_2020_02_23/","content":"\n### Vue.js\n> vue-news-vendor toy project\n\n- Vuetify 사용하는게 익숙치 않아 시간소모가 큼\n- 기존하던 방법으로 구현먼저 이뤄져야 하는데, 계속 문서보는데 시간소모\n- [vue-router](https://router.vuejs.org/kr/guide/advanced/data-fetching.html#%ED%83%90%EC%83%89-%ED%9B%84-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0)공식 문서내에 데이터 가져오기 세션\n- 로딩시, 스피너 이용 / 리스트 로딩시, [Skeleton loaders](https://vuetifyjs.com/en/components/skeleton-loaders#skeleton-loaders)\n\n\n### 공부법 다시보기\n> 강의를 듣는법\n\n  - 실습은 모두 직접 입력하고 실행해 본다.\n  - 이해가 안가도 오래 고민하지 않는다.(30분 / 5why정도 / 나중에 알게 된다)\n  - 반복적인 연습 (점진적인 연습을 통해 이해도를 높여 감)\n  - 종료 후 무엇인가를 만들어 보자(코딩은 만드는 도구일 뿐, 만들지 않고 학습하면 의미가 없다.)\n\n> 질문하는 법\n\n  - 질문 전에 3가지 다른 방법을 시도해 보자.\n  - 먼저 상황을 설명한다.\n  - 실행 환경을 기술한다.\n  - OS, 프레임워크 버젼 등 자세하게\n  - 문제 상황을 답변자가 재현 가능하도록\n  - 맞춤법 지키기, 그리고 예의바르게\n\n#### # references\n- [강의소개 - 강의 듣는법, 질문하는법](https://wayhome25.github.io/django/2017/02/27/django-00/)\n\n","tags":["TIL"]},{"title":"TIL_2020_02_22","url":"/2020/02/22/TIL_2020_02_22/","content":"\n### 기본기 탄탄하게 하기\n> 관련 문서 읽고 또 읽고..\n \n- [MDN - Array.prototype.sort()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n>compareFunction이 제공되지 않으면 요소를 문자열로 변환하고 유니 코드 코드 포인트 순서로 문자열을 비교하여 정렬됩니다. 예를 들어 \"바나나\"는 \"체리\"앞에옵니다. 숫자 정렬에서는 9가 80보다 앞에 오지만 숫자는 문자열로 변환되기 때문에 \"80\"은 유니 코드 순서에서 \"9\"앞에옵니다.\n\n```javascript\nfunction compare(a, b) {\n  if (a is less than b by some ordering criterion) {\n    return -1;\n  }\n  if (a is greater than b by the ordering criterion) {\n    return 1;\n  }\n  // a must be equal to b\n  return 0;\n}\n```\n\n- [Vue.js 라이프사이클](https://medium.com/witinweb/vue-js-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-7780cdd97dd4)\n    - loader 같은건 버스에 태워, 각 컴포넌트가 created() 되었을 때, 업데이트 시켜준다.\n    - beforeDestroy 뷰 인스턴스 제거 전 호출, 이벤트 리스너제거의 적합\n    - **기존 작업했던 것들과 함께 정리필요\n","tags":["TIL"]},{"title":"Sorting arrays of String","url":"/2020/02/22/Sort-String/","content":"\n## 문자배열 재정렬하기 \n> 대소문자 관계없이 a-z 알파벳 순서대로 나열값 구하기\n\n```\n    [ 'D', 'a', 'G', 'C', 'b', 'e', 'f' ] =>  return [ 'a', 'b', 'C', 'D', 'e', 'f', 'G' ]\n```\n\n### # My Solutions\n```javascript\n// function strSort(arr) {\n//  return arr.sort(arr); //Array [\"C\", \"D\", \"G\", \"a\", \"b\", \"e\", \"f\"]\n// }\n\nfunction strSort(arr) {\n    arr.sort((a, b) => {\n      let newA = a.toLowerCase(),\n          newB = b.toLowerCase();\n      if(newA > newB) return 1;   \n      if(newA < newB) return -1;   \n      if(newA === newB) return 0;   \n    });\n\n   return arr;\n}\n```\n- 반환값은 복사된 값이 아닌 원래 배열!\n\n### # Examples\n```javascript\nvar items = [\n  { name: 'Edward', value: 21 },\n  { name: 'Sharpe', value: 37 },\n  { name: 'And', value: 45 },\n  { name: 'The', value: -12 },\n  { name: 'Magnetic', value: 13 },\n  { name: 'Zeros', value: 37 }\n];\n\n// value 기준으로 정렬\nitems.sort(function (a, b) {\n  if (a.value > b.value) {\n    return 1;\n  }\n  if (a.value < b.value) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n});\n\n// name 기준으로 정렬\nitems.sort(function(a, b) {\n  var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n  var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n  if (nameA < nameB) {\n    return -1;\n  }\n  if (nameA > nameB) {\n    return 1;\n  }\n\n  // 이름이 같을 경우\n  return 0;\n});\n```\n\n## # reference\n- [MDN - Array.prototype.sort()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n","tags":["algorithm"]},{"title":"TIL_2020_02_21","url":"/2020/02/21/TIL_2020_02_21/","content":"\n### 기본기 탄탄하게 하기\n> 관련 문서 읽고 또 읽고..\n \n- [Strict mode](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode)\n- [Vuex - Strict mode](https://vuex.vuejs.org/kr/guide/strict.html)\n\n\n#### # references\n- 이전에 뷰로 구현시 겪었던 이슈: [Vue.js 2.x - Strict 모드에서는 속성을 여러번 정의할수 없습니다(IE11)](http://1004lucifer.blogspot.com/2019/05/vuejs-2xerror-strict-ie11.html)\n- 좋은글**[트리 쉐이킹 되는 UI 라이브러리 만들기 ㄱ부터 ㅎ까지](https://meetup.toast.com/posts/220)\n\n  \n### thoughts\n- [tui calendar](https://ui.toast.com/tui-calendar/) 클론해보고 싶다.\n","tags":["TIL"]},{"title":"TIL_2020_02_20","url":"/2020/02/20/TIL_2020_02_20/","content":"\n### 알고리즘 자주 나오는 문제 정리하기\n1_ String 대소문자 관계 없이 순서대로 나열하기\n    ex)A. b, c, D, E\n\n2_ 최적의 잔돈구하기(10, 50, 100, 500원 으로)\n\n\n### Vue.js\n- 디자인 없이 적용하느라 생각보다 시간이 오래 걸리고 있다.\n- news-vendor와 small-chat 을 한 프로젝트에 녹여낼 예정\n- 기능 확장(뉴스 검색, chat 에서 넣으려고 했던 로그인, 파일 업로드, 대화창 클린봇 등) \n\n### git\n- 커밋 메세지 작성법부터 다시 보고 적용중\n- 이제까지 커밋을 했는데, 잔디가 만들어지지 않는 경우가 있었다. -> 깃허브에 등록된 이메일과 로컬 깃 이메일이 동일해야 한다.\n> 작업중인 폴더로 가서 아래 명령어를 사용해서 email이 등록되어 있는지 확인\n> \n> git config --list\n>  \n>  등록되어 있으면\n> \n>  git config user.email \"[Your Email]\"로 가서 이메일 수정\n>  \n>  global에 email을 등록 (별도로 git config를 고치지 않게 global에 등록)\n>  \n>  git config --global user.email \"[Your Email]\"\n  \n\n#### # reference:\n- [Github에 잔디가 안심어질 때!](https://devkyu.tistory.com/872)\n- [Git 커밋 메시지 작성법](http://blog.weirdx.io/post/33832)\n","tags":["TIL"]},{"title":"Format a string of names like 'Bart, Lisa & Maggie'","url":"/2020/02/19/Format a string of names like 'Bart, Lisa & Maggie'/","content":"\n## Kata\nGiven: an array containing hashes of names\n\nReturn: a string formatted as a list of names separated by commas except for the last two names, which should be separated by an ampersand.\n\nExample:\n```javascript\nlist([ {name: 'Bart'}, {name: 'Lisa'}, {name: 'Maggie'} ])\n// returns 'Bart, Lisa & Maggie'\n\nlist([ {name: 'Bart'}, {name: 'Lisa'} ])\n// returns 'Bart & Lisa'\n\nlist([ {name: 'Bart'} ])\n// returns 'Bart'\n\nlist([])\n// returns ''\n```\nNote: all the hashes are pre-validated and will only contain A-Z, a-z, '-' and '.'.\n\n\n### # My Solutions\n```javascript\nfunction list(names){\n  let tempNames = names; //arr\n  let nameArr = tempNames.map(x => x.name);\n  let result;\n  \n  tempName = nameArr.join(', ');\n  let lastName = nameArr[nameArr.length-1];\n  result = tempName.replace(`, ${lastName}`, ` & ${lastName}`);\n  \n  return result;\n}\n```\n\n### # Others\n> 마지막 요소만 따로 떼어 ' & ' 붙이기 \n\n```javascript\nfunction list(names) {\n  var xs = names.map(p => p.name)\n  var x = xs.pop()\n  return xs.length ? xs.join(\", \") + \" & \" + x : x || \"\"\n}\n```\n\n> 정규식\n\n```javascript\nvar list = (names) =>  names.map(x => x.name).join(', ').replace(/(.*),(.*)$/, \"$1 &$2\")\n```\n\n### # thoughts\n- 여전히 정규식은 어렵게 다가온다.\n","tags":["codewars"]},{"title":"Delete occurrences of an element if it occurs more than n times","url":"/2020/02/19/Delete-occurrences-of-an-element-if-it-occurs-more-than-n-times/","content":"\n## Kata\nEnough is enough!\nAlice and Bob were on a holiday. Both of them took many pictures of the places they've been, and now they want to show Charlie their entire collection. However, Charlie doesn't like this sessions, since the motive usually repeats. He isn't fond of seeing the Eiffel tower 40 times. He tells them that he will only sit during the session if they show the same motive at most N times. Luckily, Alice and Bob are able to encode the motive as a number. Can you help them to remove numbers such that their list contains each number only up to N times, without changing the order?\n\nTask\nGiven a list lst and a number N, create a new list that contains each number of lst at most N times without reordering. For example if N = 2, and the input is [1,2,3,1,2,1,2,3], you take [1,2,3,1,2], drop the next [1,2] since this would lead to 1 and 2 being in the result 3 times, and then take 3, which leads to [1,2,3,1,2,3].\n\nExample\n```javascript\n  deleteNth ([1,1,1,1],2) // return [1,1]\n\n  deleteNth ([20,37,20,21],1) // return [20,37,21]\n```\n\n\n### # My Solutions\n```javascript\nfunction deleteNth(arr,n){\n  let result = [];\n  let newArr = arr.map(item => {\n    let num = 0;\n    result.forEach(str => {\n      if (item === str) {\n        num++;\n      }\n    })\n    if(num === n) return;\n    result.push(item);\n  });\n  return result;\n}\n```\n\n### # Others\n> 메모이제이션\n\n```javascript\nfunction deleteNth(arr,x) {\n  var cache = {};\n  return arr.filter(function(n) {\n    cache[n] = (cache[n]||0) + 1;\n    return cache[n] <= x;\n  });\n}\n```\n\n### # thoughts\n- 현재 내가 구현한 코드는 효용성 최악이다. 각 배열의 요소마다 해당 요소를 계산해주고 있다.\n- 메모이제이션으로 풀면 되겠거니 했는데, 오랜만이라 제시간내엔 구현하지 못했다.\n- 객체를 만들어 각 {'아이템이름':'갯수', .., ..} 구현하는 게 좋다. Best Practices 에서 이미 잘 보여주고 있다.\n\n## references\n- [메모이제이션(Memoization) 패턴](https://kool-jay.tistory.com/19)\n","tags":["codewars"]},{"title":"TIL_2020_02_19","url":"/2020/02/19/TIL_2020_02_19/","content":"\n### codewars 도장깨기\n- MDN 문서 다시보기\n\n\n### Vue.js\n- toy project 로 news vendor 제작중\n- 주로 [element.io](https://element.eleme.io/#/en-US/component/form) 사용했는데 [vuetify](https://vuetifyjs.com/en/) 적용해볼까한다.(참고: [14 of the Most Interesting Vue UI Component Libraries for 2020](https://www.codeinwp.com/blog/vue-ui-component-libraries/))\n\n\n### git\n```text\n        fatal: The current branch master has no upstream branch.\n        To push the current branch and set the remote as upstream, use\n    \n        git push --set-upstream origin master\n``` \nmaster 브랜치가 아닌 _default 브랜치로 default 로 설정되어있었다.\n\ngithub repo -> Settings -> Branch 에서 Default branch 재설정 가능하다.\n\n(cf. 메인프로젝트 저장소를 바라보는 remote 를 upstream 이라는 용어를 쓴다고 한다.)\n\n\n#### # reference:\n- [오픈소스 기여를 위한 GITHUB 개념정리](http://guruble.com/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EC%BB%A8%ED%8A%B8%EB%A6%AC%EB%B7%B0%ED%84%B0%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%98%EB%8A%94-%EA%B2%83/)\n- [Fork한 Github 소스 원래 소스와 싱크하기](http://www.notforme.kr/archives/1631)\n- [자주 사용하는 기초 Git 명령어 정리하기](https://medium.com/@pks2974/%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B8%B0%EC%B4%88-git-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0-533b3689db81)\n\n","tags":["TIL"]},{"title":"TIL_2020_02_18","url":"/2020/02/18/TIL_2020_02_18/","content":"\n### codewars 도장깨기\n- MDN 문서 다시보기\n\n### 도서) 훌륭한 프로그래머 되는 법\n>Becoming a Better Programmer;\n>\n>프로젝트와 팀을 성공으로 이끄는 선배 개발자의 노하우\n\n>어떤 코딩 환경에서든 단지 작동하는 것처럼 보이는 코딩은 거부해야 한다.\n>\n>프로그래머는 올바르게 작동하는 훌륭한 코드를 짜도록 노력해야한다.\n>\n>(그리고 올바른 작동을 증명하는 적절한 테스트도 갖추어야 한다.)\n>\n> p.32 1장 코드에 신경 쓰기\n  \n  \n### thoughts\n - 프로그래밍 공부법에 대해서 고민하면서 많은 책들을 읽었는데, 개인적으로 [훌륭한 프로그래머 되는 법](https://book.naver.com/bookdb/book_detail.nhn?bid=9899036)을 즐겁게 읽고 있다.\n \n\n---\n","tags":["TIL"]},{"title":"Disemvowel Trolls","url":"/2020/02/18/Disemvowel-Trolls/","content":"\n## Kata\n\nTrolls are attacking your comment section!\n\nA common way to deal with this situation is to remove all of the vowels from the trolls' comments, neutralizing the threat.\n\nYour task is to write a function that takes a string and return a new string with all vowels removed.\n\nFor example, the string \"This website is for losers LOL!\" would become \"Ths wbst s fr lsrs LL!\".\n\nNote: for this kata y isn't considered a vowel.\n\n### # My Solutions\n\n```javascript\nfunction disemvowel(str) {\n  //   let tempStr = str;\n  //   const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\n  //   // #1\n  //   for(let i=0;i<tempStr.length;i++) {\n  //     if(vowels.includes(tempStr[i])) {\n  //       str = str.replace(tempStr[i], '');\n  //     }\n  //   }\n\n  // #2\n  str = str.replace(/a|e|i|o|u/gi, \"\");\n\n  return str;\n}\n```\n\n### # Others\n\n> 정규식으로 풀이\n\n```javascript\nfunction disemvowel(str) {\n  return str.replace(/[aeiou]/gi, \"\");\n}\n```\n\n- [xyz] 문자셋(Character set) 매칭되는 것\n- [^xyz] 음의 문자셋(negated) or 보수 문자셋(complemented) []안에 있지 않은 문자열과 매칭\n- ig 대소문자 둘다\n\n### # thoughts\n\n- 우연하게 [어제](https://sujeongy.github.io/2020/02/17/Extract-the-domain-name-from-a-URL/)랑 비슷한 유형이라서 바로 정규식으로 풀어봤다.\n- String 문제는 정규식으로 푸는게 좋을거 같다.(아직은 정규식 초보)\n- replace, split, slice 모두 새로운 값 반환(+반환값들의 형식도 다시 확인)\n\n## references\n\n- [MDN - String.prototype.replace()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n- [MDN - String.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice)\n- [MDN - String.prototype.split()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n- [정규식(Regular Expressions)](https://beomy.tistory.com/21)\n","tags":["codewars"]},{"title":"TIL_2020_02_17","url":"/2020/02/17/TIL_2020_02_17/","content":"\n### 알고리즘 계속 발담그기\n> codewars에서 수련중..\n \n- 시간 제한두고 풀기(20분 + 초과10분)\n- 역시 생각만 하는 것과 직접 구현하는 것은 다르다. 해봐야 안다.\n \n\n### Vue.js\n> 기존 repo 정리 겸 복기 중\n\n- 뷰공식문서에 제안하는 강의 [vue mastery](https://www.vuemastery.com/)\n- [앱이 어떻게 로드되는지, 뷰 빌드](https://www.vuemastery.com/courses/real-world-vue-js/vue-cli) 등 쉽게 설명해두었다.\n- [Vue Conference Videos](https://www.vuemastery.com/conferences/)\n  \n  \n### thoughts\n - 블로그의 본질을 정보전달(이미 좋은글이 많다)보다 **알고리즘문제풀이, 버그노트** 중점으로\n \n","tags":["TIL"]},{"title":"Extract the domain name from a URL","url":"/2020/02/17/Extract-the-domain-name-from-a-URL/","content":"\n## Kata\nWrite a function that when given a URL as a string, parses out just the domain name and returns it as a string. For example:\n```javascript\ndomainName(\"http://github.com/carbonfive/raygun\") == \"github\" \ndomainName(\"http://www.zombie-bites.com\") == \"zombie-bites\"\ndomainName(\"https://www.cnet.com\") == \"cnet\"\n```\n\n### # My Solutions\n```javascript\nfunction domainName(url){\n  const s1 = 'https://',\n        s2 = 'http://',\n        s3 = 'www.';\n  let newUrl = url;\n \n  if(url.indexOf(s1)>-1) {\n    newUrl = newUrl.slice(s1.length);\n  } else if(url.indexOf(s2)>-1) {\n    newUrl = newUrl.slice(s2.length);\n  }\n  if(url.indexOf(s3)>-1) {\n    newUrl = newUrl.slice(s3.length);\n  }\n  \n  return newUrl.substring(0, newUrl.indexOf('.'))\n}\n```\n\n### # Others\n> 정규식으로 풀이\n\n```javascript\nfunction domainName(url){\n  return url.match(/(?:http(?:s)?:\\/\\/)?(?:w{3}\\.)?([^\\.]+)/i)[1];\n}\n```\n\n> replace() 메소드 사용\n\n```javascript\nfunction domainName(url){\n  url = url.replace(\"https://\", '');\n  url = url.replace(\"http://\", '');\n  url = url.replace(\"www.\", '');\n  return url.split('.')[0];\n};\n```\n\n\n### # thoughts\n - '정규식으로 풀면 되겠구나!' -> 시간을 재고 푸는중이라 자주 쓰는 방법으로 풀어버렸다.\n - 결국 습관적으로 나오는 코드가 본인 실력이겠거니..\n - 메소드 반환값이 새로운 것을 반환하는지, 기존 것을 수정하는지 확인하자.\n \n\n## references\n- [MDN - String.prototype.replace()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n- [정규식(Regular Expressions)](https://beomy.tistory.com/21)\n","tags":["codewars"]},{"title":"TIL_2020_02_16","url":"/2020/02/16/TIL_2020_02_16/","content":"\n### 알고리즘 계속 발담그기\n> codewars에서 수련중..\n \n #### (혼자 적용하는) 진행방법\n 1_ 문제를 읽은 다음 바로 노트북을 덮는다.\n 2_ 손 코딩으로 먼저 풀어본다.\n 3_ 헷갈리는 메소드 검색해서 풀어본다.\n 4_ 위 과정 반복\n\n#### # 배운 점 :\n  - 다른 사람들이 푼 코드로도 많은 깨달음 얻는 중(똑똑한 사람들이 많다.. 정말)\n  - 설명하면서 풀기는 어렵다.\n  - 연습, 또 연습. **의식적인 훈련** 중요성\n\n#### # 참조\n- [알고리즘 학습에 대한 조언](https://edykim.com/ko/post/advice-on-learning-algorithms/)\n- [JS 알고리즘 문제 풀이시 자주 사용되는 테크닉](https://takeuu.tistory.com/tag/159)\n- [코드 비주얼라이저](http://www.pythontutor.com/visualize.html#mode=edit)\n \n\n### Vue.js\n> 기존 repo 정리 겸 복기 중\n\n#### # 배운 점 :\n- 공식문서의 소중함(읽고 또 읽자. 언제나 답은 공식문서 먼저..)\n- 뷰를 더 뷰스럽게 만들고 싶어졌다. (각각의 프레임워크가 추구하는 정신?)\n\n#### # 참조\n- [VueJS render 메소드](https://greenmon.dev/2019/02/25/vuejs-render.html)\n  \n  \n### thoughts\n - 주말엔 집 인터넷이 느리다. 인터넷이 안되면 안되는 대로, 힌트 없이 코딩 훈련이 되는건가..\n","tags":["TIL"]},{"title":"TIL_2020_02_15","url":"/2020/02/15/TIL_2020_02_15/","content":"\n### 알고리즘 발담그기\n\n> 효율성, 효율성, 효율성..\n\n- 빅 오(Big-O) 분석의 중요성을 새삼 깨달음( refer. 프로그래밍 면접 이렇게 준비한다.)\n- [codewars](https://www.codewars.com/dashboard) ![codewar](https://www.codewars.com/users/sujeongy/badges/micro) 에서 수련중\n  > 하단에 테스트 코드를 직접 볼수 있어서 좋다. (test framework: Mocha + chai.js)\n- [프로그래머스](https://programmers.co.kr/learn/challenges?tab=all_challenges), [codility](https://app.codility.com/programmers/)\n\n### 일일커밋\n\n> 커밋을 위한 커밋을 하지말자.\n\n먼저 시작한 분들에게서 같은 고민의 흔적들을 찾았다.\n\n- [일일커밋 3주년 회고](https://jojoldu.tistory.com/464)\n- [체대 출신 개발자의 2019년 회고 > 깃헙 일일커밋 종료](https://ryan-han.com/post/memoirs/memoirs2019/)\n\n코드가 우선이다.\n\n의도가 주객전도 되지않길. 경계하자.\n\n### git\n\n- 이전 포스팅에서 언급했던 [좋은 git 사용 습관](https://cjh5414.github.io/git-habit/)을 실천중\n- .gitkeep, .gitattribute, .gitmodules 등을 정리해서 포스팅 예정\n\n### thoughts\n\n- 예전에 OS마다 개행문자가 달라 이슈가 발생했는데, 그때 .gitattribute 파일의 존재를 몰라 고생했었다.\n","tags":["TIL"]},{"title":".gitignore not working","url":"/2020/02/15/gitignore-not-working/","content":"\n## 현상\n.gitignore 파일이 제대로 동작되지 않아, 무시되어야 할 파일과 폴더들이 커밋에 포함된다.\n\n\n## 시도\n> .gitignore 파일을 나중에 적용하는 경우, 주로 사용되는 방법\n\n```\n$ git rm -r --cached .\n$ git add .\n$ git commit -m \"apply .gitignore\"\n$ git push\n```\n아래와 같은 이슈 발생\n```\nE:\\hexo-personal-blog>git rm -r --cached .\nerror: the following files have staged content different from both the\nfile and the HEAD:\n    .deploy_git\n    .idea/workspace.xml\n(use -f to force removal)\n```\n\n\n## 해결 방법\n> (!주의) 커밋되지 않은 변경사항을 다 잃을 수 있다.\n>\n> 현재 어떠한 수정사항이 없는 경우에서 진행되면 좋다.\n>\n> 또는 ignore 될 파일들을 부분적으로 제외시키고 커밋된 상태에서 진행하자. \n\n\n```\n$ git reset HEAD --hard // solved\n\n// it would work!\n$ git rm -r --cached . \n$ git add .\n$ git commit -m \"fixed .gitignore\"\n$ git push\n```\n\n## 참조\n  - [.gitignore is ignored by Git](https://stackoverflow.com/questions/11451535/gitignore-is-ignored-by-git)\n  - [좋은 git 사용 습관](https://cjh5414.github.io/git-habit/)\n","tags":["NotWorking","git"]},{"title":"TIL_2020_02_14","url":"/2020/02/14/TIL_2020_02_14/","content":"\n### 블로그 완성\n> hexo 기반의 개인 블로그\n\nTIL 목적으로 가볍게 시작했으나, 개발노트 블로그로..\n#### # 배운 점 :\n- 가이드 페이지(e.g. publishing, api)로 참고할 것이 많다.([hexo 테마(theme)](https://hexo.io/themes/))\n- README 잘읽자. 잘쓰자.\n\n### 블로그 컨텐츠 구상\n>블로그 내부에서 tags가 될 가능성이 농후한 것들\n\n  - TIL\n  - NotWorking 시리즈(i.e. Bug Note)\n  - 알고리즘 문제풀이\n  - 체험기\n  - tip\n  - 읽을거리\n     \n### github repo 정리\n  - vue-study 내부에 있던 프로젝트 -> 각각 레파지토리 만들기\n  - (진행중)vue-news-vendor\n  - (예정)vue-small-chat\n    \n  \n### thoughts\n - TIL 작성에도 형식이 필요하지 않을까?\n \n","tags":["TIL"]},{"title":"hello world!","url":"/2020/02/14/hello-world/","content":"\n모든 시작이 그렇듯,  \"hello world!\"\n\n개인 개발 노트 시작\n\n기록하고 기록하자.\n\n\n##### # 글쓰기 중요성 관련 글\n- [어떻게 하면 개발을 잘할 수 있을까요?](https://www.popit.kr/%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EB%A9%B4-%EA%B0%9C%EB%B0%9C%EC%9D%84-%EC%9E%98%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94/)\n\n"}]